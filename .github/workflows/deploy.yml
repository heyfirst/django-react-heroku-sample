name: Release to Production

on:
  push:
    branches: [master]

jobs:
  build-frontend:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2 # If you're using actions/checkout@v2 you must set persist-credentials to false in most cases for the deployment to work correctly.
        with:
          persist-credentials: false

      - name: Cache  üíæ
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}

      - name: Install and Build üîß # This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.
        uses: actions/setup-node@v1
      - run: npm install --if-present
      - run: npm run test
      - run: npm run build

  build-backend:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]
        poetry-version: [1.1.4]
    defaults:
      run:
        working-directory: ./backend
    services:
      postgres: # we need a postgres docker image to be booted a side car service to run the tests that needs a db
        image: postgres
        env: # the environment variable must match with app/settings.py if block of DATBASES variable otherwise test will fail due to connectivity issue.
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github-actions
        ports:
          - 5432:5432 # exposing 5432 port for application to use
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code # checking our the code at current commit that triggers the workflow
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run image
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: Install requirements # install application requirements
        run: poetry install --no-dev
      - name: Run Migrations # run migrations to create table in side car db container
        run: poetry run python backend/manage.py migrate
      - name: Run Test # running tests
        run: poetry run python backend/manage.py test

  run-e2e-cypress-test:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Sprint up frontend & backend
        run: echo Hello, world!

      - name: Run Cypress
        run: echo Hello, world!

  deploy-frontend-to-vercel:
    needs: [run-e2e-cypress-test]
    runs-on: ubuntu-20.04
    environment: CI
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v2
      - uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID}}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}}

  deploy-backend-to-heroku:
    needs: [run-e2e-cypress-test]
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v2

      - name: Deploy to Heroku!
        run: echo Hello, world!
